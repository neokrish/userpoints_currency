<?php
// $Id: 

/**
 * @file
 *
 * userpoints_currency allows purchase and redeeming of points.
 *
 * @ingroup userpoints
 */
function userpoints_currency_menu() {
  $items = array();

  $items['user/%/buy-points'] = array(
    'title' => 'Buy Points',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_currency_buy'),
    'access arguments' => array('buy userpoints'),
    'type' => MENU_LOCAL_TASK,
    'weight' =>300,
  );
  
  $items['user/%/redeem-points'] = array(
    'title' => 'Redeem Points',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_currency_redeem'),
    'access arguments' => array('redeem userpoints'),
    'type' => MENU_LOCAL_TASK,
    'weight' =>301,
  ); 
  $items['admin/settings/userpoints_currency'] = array(
    'title' => 'User points Currency',
    'description' => 'Modify your points here.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_currency_settings'),
    'access arguments' => array('userpoints currency setting'),
    'type' => MENU_NORMAL_ITEM,
  );    
return $items;
}

function userpoints_currency_buy($form_state) {

  // Display page 2 if $form_state['storage']['page_two'] is set
  if (isset($form_state['storage']['page_two'])) {
    return userpoints_currency_buy_page_two($form_state);
  }
  // Page 1 is displayed if $form_state['storage']['page_two'] is not set
  
$upp_starting_value = variable_get('upp_starting_value', 50);
$upp_ending_value = variable_get('upp_ending_value', 500);
$upp_points_per_bundle = variable_get('upp_points_per_bundle', 50);
$cost_per_bundle = variable_get('upp_price_per_bundle', 10);
$option = array();
$option['Select'] = 'Select';
while($upp_starting_value <= $upp_ending_value)
  {
  $option[$upp_starting_value] = $upp_starting_value;
  $upp_starting_value = $upp_starting_value + $upp_points_per_bundle;
  }
  $form['title'] = array(
    '#value' => "<h2>Purchase Points</h2>",    
  );   
  $form['summary'] = array(
    '#type' => 'fieldset',
    '#title' => t('Buy Points'),   
  );    
  $form['summary']['text'] = array(
    '#value' => "You can purchase points in multiples of $upp_points_per_bundle. Each bundle of $upp_points_per_bundle points costs $cost_per_bundle USD.<br/> You can use these points to award authors whose work you love to appreciate.",    
  );     
  $form['summary']['user_points_buy'] = array(
  '#type' => 'select',
  '#title' => t('Select'),
  '#default_value' => variable_get('user_points_buy','select'),
  '#options' => drupal_map_assoc(array_values($option)),
  '#description' => t('Number of points you wish to purchase.'),
);

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next >>',
  );
  return $form;
}

// New function created to help make the code more manageable.
function userpoints_currency_buy_page_two($form_state) {
  $cost_per_bundle = variable_get('upp_price_per_bundle', 10);
  $upp_points_per_bundle = variable_get('upp_points_per_bundle', 50);
  
  $purchase_points = $form_state['values']['user_points_buy'];
  $cost = $purchase_points / $upp_points_per_bundle * $cost_per_bundle;
  $vars = array(
    'module' => 'userpoints_currency',
    'type' => 'Points purchase',
    'item_name' => 'Purchase User Points',
    'no_shipping' => TRUE,
    'no_note' => TRUE,
    'return' => url('', array('absolute' => TRUE)),
    'amount' => $cost,
  );
 
  $form = simple_payments_paypal_payment_form($vars);
  $form['title'] = array(
    '#value' => "<h2>Purchase Points</h2>",    
  );   
  $form['summary'] = array(
    '#type' => 'fieldset',
    '#title' => t('Summary of your purchase'),   
  );
  $form['summary']['text'] = array(
    '#value' => "You are purchasing $purchase_points points for $cost USD. Please proceed with the payment process to complete this purchase.",    
  );   
  $form['button'] = array(
    '#type' => 'button',
    '#value' => t('Pay with PayPal'),
  );

  return $form;
}


/**
 * The validate function now validates page 2 as well.
 */
function userpoints_currency_buy_validate($form, &$form_state) {
  $user_points_buy = $form_state['values']['user_points_buy'];
  if ($user_points_buy == 'Select') {
    form_set_error('user_points_buy', 'Please select the points to buy.');
  }
}

function userpoints_currency_buy_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#id'] == 'edit-next') {
    $form_state['storage']['page_two'] = TRUE; 
    $form_state['storage']['page_one_values'] = $form_state['values'];
  }
  else {
  // do nothing.
  }
}

function userpoints_currency_simple_payment_process($payment) {

}

function userpoints_currency_redeem(&$form_state){ 
$form['summary'] = array(
  '#value' => t('You are currently having some points. <br />')
  );  
$form['redeem_points'] = array(
  '#type' => 'textfield',
  '#title' => t('Points to Redeem'),
  '#default_value' => $text,
  '#description' => t('Please enter in multiple of hundreds for Ex:- 100, 200, 300...'),
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
);

$form['redeem'] = array(
  '#type' => 'submit',
  '#value' => t('Redeem'),
);
return $form;
}

function userpoints_currency_redeem_validate($form, &$form_state) {
  //dsm($form_state);
  $var = $form_state['values']['redeem_points'];
  if($var%100== 0){
    drupal_set_message("Your request to redeeming $var has been sent. We will process it soon and notify you when done.");
  }
  else
  {
    form_set_error('title', 'Please enter into multiple hundreds.');

  }
}

function userpoints_currency_settings(&$form_state){

$form['buy_points_settings'] = array(
  '#type' => 'fieldset',
  '#title' => t('Buy Points in Bundle settings'),
  '#collapsible' => TRUE,
  '#collapsed' => FALSE,
);


$form['buy_points_settings']['upp_starting_value'] = array(
  '#type' => 'textfield',
  '#title' => t('Starting Points'),
  '#description' => t('Starting Points minimum with 50'),
  '#default_value' => variable_get('upp_starting_value','0'),
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
);

$form['buy_points_settings']['upp_ending_value'] = array(
  '#type' => 'textfield',
  '#title' => t('Ending Points'),
  '#description' => t('Ending Points minimum with 500'),
  '#default_value' => variable_get('upp_ending_value','0'),
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
);

$form['buy_points_settings']['upp_points_per_bundle'] = array(
  '#type' => 'textfield',
  '#title' => t('Points per Bundle'),
  '#description' => t('Enter your points per Bundle'),
  '#default_value' => variable_get('upp_points_per_bundle','0'),
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
);

$form['buy_points_settings']['upp_price_per_bundle'] = array(
  '#type' => 'textfield',
  '#title' => t('Price per Bundle'),
  '#description' => t('Enter your price per Bundle'),
  '#default_value' => variable_get('upp_price_per_bundle','0'),
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
);  
/*
$form['Buy Arbitary points'] = array(
  '#type' => 'fieldset',
  '#title' => t('Buy Arbitary points settings'),
  '#weight' => 6,
  '#collapsible' => TRUE,
  '#collapsed' => FALSE,
);

$form['Buy Arbitary points']['Price Per Point'] = array(
  '#type' => 'textfield',
  '#title' => t('Price per Bundle'),
  '#description' => t('Enter the price per Point'),
  '#default_value' => $node->title,
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
); 

$form['Buy Arbitary points']['minimum purchase point'] = array(
  '#type' => 'textfield',
  '#title' => t('Minimum Purchase Point'),
  '#description' => t('Enter the minimum purchase points.'),
  '#default_value' => $node->title,
  '#size' => 12,
  '#maxlength' => 60,
  '#required' => TRUE,
); 

$form['mode'] = array(
  '#type' => 'fieldset',
  '#title' => t('Modify by any of one'),
  '#weight' => 7,
  '#collapsible' => TRUE,
  '#collapsed' => FALSE,
);

$form['mode']['modify by any of one group'] = array(
  '#type' => 'radios',
  '#title' => t('Select any of one'),
  '#default_value' => '',
  '#options' => array(t('Buy in Bundle'), t('Buy Arbitrary Points')),
);

*/
return system_settings_form($form);
}